<?php

App::uses('AppModel', 'Model');

/**
 * CakePHP FinMovimentacaoModel
 * @author Gustavo Cardoso
 */
class FinMovimentacao extends AppModel {
    
    public $actsAs = array('Logable' => array(
        'description' => array(
            'add' => 'Cadastrou a movimentação <b>%s</b>',
            'edit' => 'Editou a movimentação <b>%s</b>',
            'delete' => 'Excluiu a movimentação <b>%s</b>'
        )
    ));

    /*
     * PARA CONSEGUIR VERIFICAR REGISTROS PENDENTES DIRETAMENTO NO MODEL 
     * O CAKEPHP SUGERE QUE O MÉTODO CONSTRUTOR SEJA REESCRITO, POIS
     * NÃO É POSSIVEL PASSAR PARÂMENTROS DIRETAMENTO NO CÓDIGO DO 
     * VITUAL FIELD, ESTE WORKAROUND FOI RETIRADO DA PÁGINA
     * http://stackoverflow.com/questions/20506225/virtual-fields-have-dynamic-model-name
     * AINDA ESTÁ EM OBSERVAÇÃO APÓS ALGUNS MESES AVALIAREI SE HÁ ALGUM IMPACTO NEGATIVO
     * DATA 18/02/2016
     */
    public function __construct($id = false, $table = null, $ds = null) {

        $this->virtualFields['status'] = "CASE 
                                            WHEN FinMovimentacao.status = 'AG' AND FinMovimentacao.data_vencimento < '".date('Y-m-d')."' THEN 'PE' 
                                            ELSE FinMovimentacao.status
                                        END";

        $this->virtualFields['status_nome'] = "CASE 
                                                    WHEN FinMovimentacao.status = 'AG' AND data_vencimento < '".date('Y-m-d')."' THEN 'Pendente'
                                                    WHEN FinMovimentacao.status = 'AG' AND data_vencimento >= '".date('Y-m-d')."' THEN 'Agendado' 
                                                    WHEN FinMovimentacao.status = 'PE' THEN 'Pendente' 
                                                    WHEN FinMovimentacao.status = 'PG' THEN 'Confirmado' 
                                                    WHEN FinMovimentacao.status = 'CO' THEN 'Conciliado' 
                                                    ELSE '-'
                                                END";

        $this->virtualFields['status_label'] = "CASE 
                                                    WHEN FinMovimentacao.status = 'AG' AND data_vencimento < '".date('Y-m-d')."' THEN 'danger' 
                                                    WHEN FinMovimentacao.status = 'AG' AND data_vencimento >= '".date('Y-m-d')."' THEN 'info' 
                                                    WHEN FinMovimentacao.status = 'PE' THEN 'danger' 
                                                    WHEN FinMovimentacao.status = 'PG' THEN 'success' 
                                                    WHEN FinMovimentacao.status = 'CO' THEN 'purple'                             
                                                    ELSE '-'
                                                END";

        parent::__construct($id, $table, $ds);
    }

    public $belongsTo = array('User', 'GelPessoa', 'FinCategoria', 'FinCentro', 'FinConta');

    public $order = 'FinMovimentacao.data asc, FinMovimentacao.descricao asc';

    public $displayField = 'descricao';

    public $virtualFields = array(
        'data' => 'CASE 
                        WHEN data_confirmacao IS NOT NULL THEN data_confirmacao
                        ELSE data_vencimento 
                   END',
        'valor' => 'CASE 
                        WHEN valor_final > 0 THEN valor_final
                        ELSE valor_inicial 
                   END',
        'pessoa_nome' => '(SELECT GelPessoa.nome FROM gel_pessoas GelPessoa WHERE GelPessoa.id = FinMovimentacao.gel_pessoa_id)',
        'categoria_nome' => "(SELECT CASE WHEN (SELECT FinCategoriaPai.nome FROM fin_categorias FinCategoriaPai WHERE FinCategoriaPai.id = FinCategoria.fin_categoria_id) IS NULL THEN FinCategoria.nome ELSE CONCAT((SELECT FinCategoriaPai.nome FROM fin_categorias FinCategoriaPai WHERE FinCategoriaPai.id = FinCategoria.fin_categoria_id),'/',FinCategoria.nome) END FROM fin_categorias FinCategoria WHERE FinCategoria.id = FinMovimentacao.fin_categoria_id)",
        'conta_nome' => "(SELECT FinConta2.nome FROM fin_contas FinConta2 WHERE FinConta2.id = FinMovimentacao.fin_conta_id)",
        //'centro_nome' => '(SELECT FinCentro.nome FROM fin_centros FinCentro WHERE FinCentro.id = FinMovimentacao.fin_centro_id)',
    );

    public $validate = array(
        'gel_empresa_id' => array(
            'required' => array(
                'on' => 'create',
                'rule' => 'notEmpty',
                'message' => 'Campo obrigatório', 
                'required' => true 
            )
        ), 
        'user_id' => array(
            'required' => array(
                'on' => 'create',
                'rule' => 'notEmpty',
                'message' => 'Campo obrigatório', 
                'required' => true 
            )
        ),  
        'fin_conta_id' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            )
        ),
        'fin_categoria_id' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            )
        ),
        'valor_inicial' => array(
            'moeda' => array(
                'rule' => array('money'),
                'message' => 'Formato inválido'
            ),
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            ),
            'minimo' => array(
                'rule' => array('comparison', '>', 0),
                'message' => 'Valor mínimo = R$ 0,01'
            )
        ),
        'data_vencimento' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            )
        ),
    );

    public $validateDescricao = array(
        'descricao' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            )
        ),
    );

    public $validateParcelas = array(
        'total_parcelas' => array(
            'minimo' => array(
                'rule' => array('comparison', '>=', 2),
                'message' => 'Mínimo = 2 '
            )
        ),
        'parcela_inicial' => array(
            'minimo' => array(
                'rule' => array('comparison', '>=', 1),
                'message' => 'Mínimo = 1 '
            ),
            'maximo' => array(
                'rule' => array('limiteNumero', '<=', 'total_parcelas'),
                'message' => 'Máximo = Nº Parcelas'
            ),
        ),
    );

    public $validateFrequencia = array(
        'frequencia' => array(
            'minimo' => array(
                'rule' => array('comparison', '>=', 1),
                'message' => 'Mínimo = 1 '
            )
        ),
    );

    public $validateConfirmacao= array(
        'valor_final' => array(
            'moeda' => array(
                'rule' => array('money'),
                'message' => 'Formato inválido'
            ),
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            ),
            'minimo' => array(
                'rule' => array('comparison', '>', 0),
                'message' => 'Valor mínimo = R$ 0,01'
            ),
        ),
        'valor_juros' => array(
            'moeda' => array(
                'rule' => array('money'),
                'message' => 'Formato inválido'
            ),
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            ),
        ),
        'valor_desconto' => array(
            'moeda' => array(
                'rule' => array('money'),
                'message' => 'Formato inválido'
            ),
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            ),
        ),
        'data_confirmacao' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            ),
            'maximo' => array(
                'rule' => array('limiteData', 'today', '<='),
                'message' => 'Máximo = Hoje'
            ),
        ),
    );

    public $validateTransferencia= array(
        'fin_conta_origem_id' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            ),
            'notIdentical' => array(
                'rule' => array('notIdentical', 'fin_conta_destino_id'),
                'message' => 'Conta de origem e destino não podem ser iguais'
            )
        ),
        'fin_conta_destino_id' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            )
        ),
        'data_vencimento' => array(
            'maximo' => array(
                'rule' => array('limiteData', 'today', '<='),
                'message' => 'Máximo = Hoje'
            ),
        ),
    );

    public $validateConciliacao = array(
        'numero_documento' => array(
            'required' => array(
                'rule' => array('notEmpty'),
                'message' => 'Campo obrigatório'
            )
        ),
    );

    public $optionsStatus = array(
        'AG' => 'Agendado',
        'PE' => 'Pendente',
        'PG' => 'Confirmado',
        'CO' => 'Conciliado'
    );

    public $optionsTiposRepeticao = array(
        'U' => 'Único',
        //'F' => 'Fixo',
        'P' => 'Parcelado',
    );

    public $optionsPeriodicidadeRepeticao = array(
        'D' => 'Dia',
        'S' => 'Semana',
        'M' => 'Mês',
        'A' => 'Ano',
    );

    public function beforeFind($query) {
        if (isset($query['conditions']['FinMovimentacao.status'])){
            if (in_array('AG', $query['conditions']['FinMovimentacao.status']) &&
                in_array('PE', $query['conditions']['FinMovimentacao.status'])){

            } else {
                foreach($query['conditions']['FinMovimentacao.status'] as $i => $status){ 
                    if($status == 'AG' && !in_array('CO', $query['conditions']['FinMovimentacao.status']) && !in_array('PG', $query['conditions']['FinMovimentacao.status'])){
                        $query['conditions']['OR']['CONVERT(FinMovimentacao.data_vencimento, DATE) >= '] = date('Y-m-d');
                    }
                    if($status == 'PE' && !in_array('CO', $query['conditions']['FinMovimentacao.status']) && !in_array('PG', $query['conditions']['FinMovimentacao.status'])){
                        unset($query['conditions']['FinMovimentacao.status'][$i]);
                        $query['conditions']['OR']['AND']['CONVERT(FinMovimentacao.data_vencimento, DATE) < '] = date('Y-m-d');
                        $query['conditions']['OR']['AND']['FinMovimentacao.status'] = 'AG';
                        $query['conditions']['OR']['FinMovimentacao.status'] = 'PE';
                    }
                }
            }

            if (empty($query['conditions']['FinMovimentacao.status'])){
                unset($query['conditions']['FinMovimentacao.status']);
            }
        }
        return parent::beforeFind($query);
    }

    public function afterFind($results, $primary = false) {
        
        // TRATA RESULTADOS
        $results = $this->trataResultadoBusca($results);

        // TOTALIZA RESULTADOS
        $results = $this->totalizaResultados($results);

        return $results;
    }

    public function beforeValidate($options = array()) {
        // VALIDAÇÕES POR TIPO DE MOVIMENTACAO
        switch ($this->data['FinMovimentacao']['tipo']) {
            // TRANSFERÊNCIA
            case 'T':
                $this->validate = array_merge($this->validate, $this->validateTransferencia);
                $this->data['FinMovimentacao']['confirmado'] = 1;
                $this->data['FinMovimentacao']['data_confirmacao'] = $this->data['FinMovimentacao']['data_vencimento'];
                $this->data['FinMovimentacao']['data_competencia'] = $this->data['FinMovimentacao']['data_vencimento'];
                $this->data['FinMovimentacao']['valor_final'] = $this->data['FinMovimentacao']['valor_inicial'];
                $this->data['FinMovimentacao']['valor_juros'] = 'R$ 0,00';
                $this->data['FinMovimentacao']['valor_desconto'] = 'R$ 0,00';
                $this->data['FinMovimentacao']['status'] = ($this->data['FinMovimentacao']['status'] == 'CO') ? 'CO': 'PG';
                break;
            default:
                $this->validate = array_merge($this->validate, $this->validateDescricao);
                break;
        }

        // VERIFICA VALIDAÇÕES CONDICIONAIS
        // VALIDAÇÕES POR TIPO DE REPETIÇÃO
        switch ($this->data['FinMovimentacao']['repeticao']) {
            case 'U':
                break;
            case 'P':
                $this->validate = array_merge($this->validate, $this->validateParcelas);
                $this->validate = array_merge($this->validate, $this->validateFrequencia);
                break;
        }
        
        // VERIFICA SE A MOVIMENTAÇÃO FOI CONFIRMADA E MUDA O STATUS 
        if ((isset($this->data['FinMovimentacao']['confirmado']) && 
            $this->data['FinMovimentacao']['confirmado'] == 1) || 
            $this->data['FinMovimentacao']['status'] == 'CO'){

            // ATUALIZA O MODO DE ALTERAÇÃO PARA 'ESTE' E O STATUS 
            // PARA 'PG-CONFIRMADO' OU 'CO-CONCLILIADO'
            $this->data['FinMovimentacao']['modo_alteracao'] = 'E';
            $this->data['FinMovimentacao']['status'] = ($this->data['FinMovimentacao']['status'] == 'CO') ? 'CO': 'PG';
        } else {
            $this->data['FinMovimentacao']['status'] = 'AG';
            $this->data['FinMovimentacao']['data_confirmacao'] = null;
            $this->data['FinMovimentacao']['valor_final'] = null;
            $this->data['FinMovimentacao']['valor_desconto'] = null;
            $this->data['FinMovimentacao']['valor_juros'] = null;
        }

        // VALIDAÇÕES POR TIPO DE STATUS
        switch ($this->data['FinMovimentacao']['status']) {
            case 'PG':
                $this->validate = array_merge($this->validate, $this->validateConfirmacao);
                break;
            case 'CO':
                $this->validate = array_merge($this->validate, $this->validateConfirmacao);
                $this->validate = array_merge($this->validate, $this->validateConciliacao);
                break;
        }

        return parent::beforeValidate($options);
    }

    public function beforeSave($options = array()) {
        // VERIFICA SE O TIPO DE MOVIMENTAÇÃO É TRANSFERÊNCIA
        // SE SIM, CONFIGURA A TRANSFERÊNCIA
        if ($this->data['FinMovimentacao']['tipo'] == 'T'){
            if (!isset($this->data['FinMovimentacao']['modo'])){
                $this->data['FinMovimentacao']['modo'] = 'O';
            }

            if ($this->data['FinMovimentacao']['modo'] == 'O'){
                $this->data['FinMovimentacao']['fin_conta_id'] = $this->data['FinMovimentacao']['fin_conta_origem_id'];
                $this->data['FinMovimentacao']['tipo'] = 'D';
                $this->data['FinMovimentacao']['transferencia'] = 1;
            } else {
                $this->data['FinMovimentacao']['fin_conta_id'] = $this->data['FinMovimentacao']['fin_conta_destino_id'];
                $this->data['FinMovimentacao']['tipo'] = 'R';
                $this->data['FinMovimentacao']['transferencia'] = 1;
            }
        }

        // VERIFICA SE A AÇÃO FOI ADD
        if (!isset($this->data['FinMovimentacao']['id'])){
            // VERIFICA SE O TIPO DE REPETIÇÃO 
            switch ($this->data['FinMovimentacao']['repeticao']) {
                case 'U':
                    // APAGA OS DADOS DE PARCELAMENTO E REPETIÇÃO
                    $this->data['FinMovimentacao']['frequencia'] = null;
                    $this->data['FinMovimentacao']['periodicidade'] = null;
                    $this->data['FinMovimentacao']['total_parcelas'] = null;
                    $this->data['FinMovimentacao']['parcela_inicial'] = null;
                    $this->data['FinMovimentacao']['parcela_descricao'] = 0;
                    break;
                case 'F':
                    // APAGA OS DADOS DE PARCELAMENTO
                    $this->data['FinMovimentacao']['total_parcelas'] = null;
                    $this->data['FinMovimentacao']['parcela_inicial'] = null;
                    break;
            }
        } else {
            // VERIFICA SE O FORMULÁRIO PERGUNTA SOBRE O MODO DE ALTERAÇÃO
            if (isset($this->data['FinMovimentacao']['modo_alteracao'])){
                // SE O MODO FOI 'ESTE'
                if ($this->data['FinMovimentacao']['modo_alteracao'] == 'E'){
                    // ALTERA O TIPO DE REPETIÇÃO PARA ÚNICO
                    $this->data['FinMovimentacao']['repeticao'] = 'U';

                    // REMOVE A INFORMAÇÃO DO CAMPO FIN_MOVIMENTACAO_ID
                    // CASO NÃO SEJA UMA TRANSFERÊNCIA
                    if (!isset($this->data['FinMovimentacao']['transferencia'])){
                        $this->data['FinMovimentacao']['fin_movimentacao_id'] = null;
                    }
                }
            }
        }
        
        return true;
    }

    public function afterSave($created, $options = array()) {
        // VERIFICA SE AÇÃO FOI ADD OU EDIT
        if($created){
            // PEGA O ID DA MOVIMENTAÇÃO CADASTRADA
            $fin_movimentacao_id = $this->getLastInsertID();

            // TRATA OS DADOS QUE SERÃO SALVOS NA PRÓXIMA PARCELA
            $this->trataRepeticaoAdd($this->data, $fin_movimentacao_id);                
        } else {
            // PEGA O ID DA MOVIMENTAÇÃO EDITADA
            $fin_movimentacao_id = $this->data['FinMovimentacao']['id'];

            // TRATA OS DADOS QUE SERÃO SALVOS NA PRÓXIMA PARCELA
            $this->trataRepeticaoEdit($this->data, $fin_movimentacao_id);    
        }
        
        // APÓS SALVAR O DÉBITO NA CONTA DE ORIGEM 
        // SALVAR O CRÉDITO NA CONTA DE DESTINO
        if (isset($this->data['FinMovimentacao']['modo']) && 
            $this->data['FinMovimentacao']['modo'] == 'O'){
            // PEGA OS DADOS SALVOS
            $aux = $this->data;

            // MUDA O MODO PARA SALVA O CRÉDITO NA CONTA DE DESTINO
            $this->data['FinMovimentacao']['tipo'] = 'T';
            $this->data['FinMovimentacao']['modo'] = 'D';

            // TRATA VALORES PARA QUE SEJAM SALVOS CORRETAMENTE
            $this->data['FinMovimentacao']['valor_inicial'] = 'R$  '.currency($this->data['FinMovimentacao']['valor_inicial']);
            $this->data['FinMovimentacao']['fin_movimentacao_id'] = $this->data['FinMovimentacao']['id'];

            $dados = $this->data;

            // FORÇA O INSERT
            if($created){
                unset($dados['FinMovimentacao']['id']);
                $this->create();
            } else {
                $dados['FinMovimentacao']['id'] = $aux['FinMovimentacao']['fin_movimentacao_id'];
            }
            
            $this->save($dados);
        } elseif (isset($this->data['FinMovimentacao']['modo']) && 
                  $this->data['FinMovimentacao']['modo'] == 'D'){

            $destino_id = $this->data['FinMovimentacao']['id'];
            $origem_id = $this->data['FinMovimentacao']['fin_movimentacao_id'];

            $sql = "UPDATE fin_movimentacoes SET fin_movimentacao_id = $destino_id WHERE id = $origem_id";
            $this->query($sql);
        }
    }

    /** 
     * Funções especiais do model
     */
    public function trataRepeticaoAdd($dados, $fin_movimentacao_id){
        
        // VERIFICA O TIPO DE REPETIÇÃO
        switch ($dados['FinMovimentacao']['repeticao']) {
            case 'U':
                // LANÇAMENTOS ÚNICOS NÃO POSSUEM REPETIÇÃO
                break;
            case 'F':
                // LANÇAMENTOS FIXOS NÃO POSSUEM REPETIÇÃO A NÍVEL DE BD
                break;
            case 'P':
                // INICIALIZA VARIÁVEIS
                $frequencia = $dados['FinMovimentacao']['frequencia'];
                $periodicidade = $dados['FinMovimentacao']['periodicidade'];
                $total_parcelas = $dados['FinMovimentacao']['total_parcelas'];
                $parcela_inicial = $dados['FinMovimentacao']['parcela_inicial']+1;
                
                // VERIFICA SE HÁ PARCELAS A ADICIONAR
                if ($parcela_inicial <= $total_parcelas){
                    // TRATA VALORES PARA QUE SEJAM SALVOS CORRETAMENTE
                    $dados['FinMovimentacao']['valor_inicial'] = 'R$  '.currency($dados['FinMovimentacao']['valor_inicial']);
                    $dados['FinMovimentacao']['valor_desconto'] = 'R$  '.currency($dados['FinMovimentacao']['valor_desconto']);
                    $dados['FinMovimentacao']['valor_juros'] = 'R$  '.currency($dados['FinMovimentacao']['valor_juros']);
                    $dados['FinMovimentacao']['valor_final'] = 'R$  '.currency($dados['FinMovimentacao']['valor_final']);

                    // PARA CADA PARCELA, SALVA UMA NOVA MOVIMENTAÇÃO
                    $dados['FinMovimentacao']['fin_movimentacao_id'] = ($dados['FinMovimentacao']['fin_movimentacao_id'] == null) ? $fin_movimentacao_id : $dados['FinMovimentacao']['fin_movimentacao_id'];
                    $dados['FinMovimentacao']['parcela_inicial'] = $parcela_inicial;

                    // CALCULA NOVAS DATAS COM BASE SE FREQUÊNCIA E PERIODICIDADE
                    $dados['FinMovimentacao']['data_vencimento'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_vencimento'], $frequencia, $periodicidade);
                    $dados['FinMovimentacao']['data_competencia'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_competencia'], $frequencia, $periodicidade);
                    $dados['FinMovimentacao']['data_confirmacao'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_confirmacao'], $frequencia, $periodicidade);
                    $dados['FinMovimentacao']['data_conciliacao'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_conciliacao'], $frequencia, $periodicidade);

                    // FORÇA O INSERT 
                    unset($dados['FinMovimentacao']['id']);
                    $this->create();

                    // SALVA OS DADOS NO BANCO
                    $this->save($dados);
                }
                break;
        }
    }

    public function trataRepeticaoEdit($dados, $fin_movimentacao_id){
        
        // VERIFICA O TIPO DE REPETIÇÃO
        switch ($dados['FinMovimentacao']['repeticao']) {
            case 'U':
                // LANÇAMENTOS ÚNICOS NÃO POSSUEM REPETIÇÃO
                break;
            case 'F':
                // LANÇAMENTOS FIXOS NÃO POSSUEM REPETIÇÃO A NÍVEL DE BD
                break;
            case 'P':
                // VERIFICA SE HAVERÁ ALTERAÇÃO NA SEQUÊNCIA
                if ($dados['FinMovimentacao']['modo_alteracao'] == 'T'){

                    // PEGA O ID E A PARCELA DA MOVIMENTAÇÃO A ATUALIZAR, SE EXISTIR
                    $ids = ($dados['FinMovimentacao']['fin_movimentacao_id'] != null) ? implode(',', array($dados['FinMovimentacao']['id'], $dados['FinMovimentacao']['fin_movimentacao_id'])) : $dados['FinMovimentacao']['id'];
                    $sql = "SELECT id, parcela_inicial FROM fin_movimentacoes FinMovimentacao WHERE fin_movimentacao_id in ($ids) AND id > ".$dados['FinMovimentacao']['id']." LIMIT 1";
                    $dados2 = $this->query($sql);

                    if (isset($dados2[0]['FinMovimentacao'])){
                        $proximo_id = $dados2[0]['FinMovimentacao']['id'];
                        $proxima_parcela = $dados2[0]['FinMovimentacao']['parcela_inicial'];

                        // INICIALIZA VARIÁVEIS
                        $frequencia = $dados['FinMovimentacao']['frequencia'];
                        $periodicidade = $dados['FinMovimentacao']['periodicidade'];
                        $total_parcelas = $dados['FinMovimentacao']['total_parcelas'];
                        $parcela_atual = $dados['FinMovimentacao']['parcela_inicial'];
                        $parcela_inicial = $proxima_parcela;
                        
                        // VERIFICA SE HÁ PARCELAS A ADICIONAR
                        if ($parcela_inicial <= $total_parcelas){
                            // TRATA VALORES PARA QUE SEJAM SALVOS CORRETAMENTE
                            $dados['FinMovimentacao']['valor_inicial'] = 'R$  '.currency($dados['FinMovimentacao']['valor_inicial']);
                            $dados['FinMovimentacao']['valor_desconto'] = 'R$  '.currency($dados['FinMovimentacao']['valor_desconto']);
                            $dados['FinMovimentacao']['valor_juros'] = 'R$  '.currency($dados['FinMovimentacao']['valor_juros']);
                            $dados['FinMovimentacao']['valor_final'] = 'R$  '.currency($dados['FinMovimentacao']['valor_final']);

                            // PARA CADA PARCELA, SALVA UMA NOVA MOVIMENTAÇÃO
                            $dados['FinMovimentacao']['fin_movimentacao_id'] = ($dados['FinMovimentacao']['fin_movimentacao_id'] == null) ? $fin_movimentacao_id : $dados['FinMovimentacao']['fin_movimentacao_id'];
                            $dados['FinMovimentacao']['parcela_inicial'] = $parcela_inicial;

                            // CALCULA NOVAS DATAS COM BASE SE FREQUÊNCIA E PERIODICIDADE
                            $frequencia = $frequencia * ($parcela_inicial-$parcela_atual);
                            $dados['FinMovimentacao']['data_vencimento'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_vencimento'], $frequencia, $periodicidade);
                            $dados['FinMovimentacao']['data_competencia'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_competencia'], $frequencia, $periodicidade);
                            $dados['FinMovimentacao']['data_confirmacao'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_confirmacao'], $frequencia, $periodicidade);
                            $dados['FinMovimentacao']['data_conciliacao'] = $this->calculaDataRepeticao($dados['FinMovimentacao']['data_conciliacao'], $frequencia, $periodicidade);

                            // FORÇA O UPDATE
                            $dados['FinMovimentacao']['id'] = $proximo_id;
                            
                            // SALVA OS DADOS NO BANCO
                            $this->save($dados);
                        } 
                    }
                }
                break;
        }
    }

    public function calculaDataRepeticao($data, $frequencia, $periodicidade){
        // CASO A DATA NÃO TENHA SIDO INFORMADA INTERROMPE O CÁLCULO
        if ($data == null || $data == ''){
            return null;
        }

        // VERIFICA O FORMATO DA DATA E CONVERTE SE NECESSÁRIO    
        if (strpos($data, '/') !== false){
            $data = convertDate($data);
        }

        // VERIFICA A PERIODICIDADE
        switch ($periodicidade) {
            case 'D':
                $periodicidade = 'days';
                break;
            case 'S':
                $periodicidade = 'week';
                break;
            case 'M':
                $periodicidade = 'months';
                break;
            case 'A':
                $periodicidade = 'years';
                break;
        }

        // MANIPULA DATA
        $data = date('Y-m-d', strtotime("+$frequencia $periodicidade", strtotime($data)));
        
        // CONVERTE DATA PARA O FORMATO BRASILEIRO
        $data = convertDate($data);

        return $data;
    }

    public function trataResultadoBusca($dados){
        
        // VERIFICA SE A CONSULTA RETORNOU UM ARRAY
        if(isset($dados[0]['FinMovimentacao'])){
            foreach($dados as $k => $dado){
                // TRATA VALORES
                if (isset($dados[$k]['FinMovimentacao']['valor_inicial'])){
                    $dados[$k]['FinMovimentacao']['valor_inicial'] = (count(explode('.',$dado['FinMovimentacao']['valor_inicial'])) > 1) ? $dado['FinMovimentacao']['valor_inicial'] : $dado['FinMovimentacao']['valor_inicial'].'.00';
                    $dados[$k]['FinMovimentacao']['valor_desconto'] = (count(explode('.',$dado['FinMovimentacao']['valor_desconto'])) > 1) ? $dado['FinMovimentacao']['valor_desconto'] : $dado['FinMovimentacao']['valor_desconto'].'.00';
                    $dados[$k]['FinMovimentacao']['valor_juros'] = (count(explode('.',$dado['FinMovimentacao']['valor_juros'])) > 1) ? $dado['FinMovimentacao']['valor_juros'] : $dado['FinMovimentacao']['valor_juros'].'.00';
                    $dados[$k]['FinMovimentacao']['valor_final'] = (count(explode('.',$dado['FinMovimentacao']['valor_final'])) > 1) ? $dado['FinMovimentacao']['valor_final'] : $dado['FinMovimentacao']['valor_final'].'.00';
                }

                // TRATA STATUS PENDENTE 
                // ESTE CÓDIGO NÃO É MAIS NECESSÁRIO, POIS ESTE PROBLEMA FOI RESOLVIDO NO MODEL
                /*if (isset($dados[$k]['FinMovimentacao']['status']) && isset($dado['FinMovimentacao']['data_vencimento'])){
                    if ($dado['FinMovimentacao']['status'] == 'AG'){
                        $data = (strpos($dado['FinMovimentacao']['data_vencimento'], '/') === false) ? $dado['FinMovimentacao']['data_vencimento'] : convertDate($dado['FinMovimentacao']['data_vencimento']);
                        if (str_replace('-', '', $data) < date('Ymd')){
                            $dados[$k]['FinMovimentacao']['status'] = 'PE';
                            $dados[$k]['FinMovimentacao']['status_nome'] = 'Pendente';
                            $dados[$k]['FinMovimentacao']['status_label'] = 'danger';
                        }
                    }
                } elseif (isset($dados[$k]['FinMovimentacao']['status']) && isset($dado['FinMovimentacao']['data'])){
                    if ($dado['FinMovimentacao']['status'] == 'AG' && strlen($dado['FinMovimentacao']['data']) == 10){
                        $data = (strpos($dado['FinMovimentacao']['data'], '/') === false) ? $dado['FinMovimentacao']['data'] : convertDate($dado['FinMovimentacao']['data']);
                        
                        if (str_replace('-', '', $data) < date('Ymd')){
                            $dados[$k]['FinMovimentacao']['status'] = 'PE';
                            $dados[$k]['FinMovimentacao']['status_nome'] = 'Pendente';
                            $dados[$k]['FinMovimentacao']['status_label'] = 'danger';
                        }
                    }
                }*/

                // TRATA DESCRIÇÃO
                if (isset($dados[$k]['FinMovimentacao']['descricao'])){
                    if ($dados[$k]['FinMovimentacao']['parcela_descricao']){
                        $dados[$k]['FinMovimentacao']['descricao'] .= ' - ('.$dado['FinMovimentacao']['parcela_inicial'].'/'.$dado['FinMovimentacao']['total_parcelas'].')';
                    }
                }
            }
        }

        return $dados;
    }

    public function totalizaResultados($results){
        // INICIALIZA VARIÁVEIS
        $totalReceitaPrevisto = 0;
        $totalReceitaRealizado = 0;
        $totalReceitaTotal = 0;
        $totalDespesaPrevisto = 0;
        $totalDespesaRealizado = 0;
        $totalDespesaTotal = 0;
        $totalSaldoPrevisto = 0;
        $totalSaldoRealizado = 0;
        $totalSaldoTotal = 0;

        // VERIFICA SE A CONSULTA RETORNOU RESULTADOS
        if (count($results) && 
            isset($results[0]['FinMovimentacao']['tipo']) &&
            isset($results[0]['FinMovimentacao']['data_confirmacao'])) {

            // TOTALIZA OS VALORES RETORNADOS
            foreach ($results as $v) {
                if ($v['FinMovimentacao']['tipo'] == 'R') {
                    if ($v['FinMovimentacao']['data_confirmacao'] != '') {
                        $totalReceitaRealizado += $v['FinMovimentacao']['valor_final'];
                    } else {
                        $totalReceitaPrevisto += $v['FinMovimentacao']['valor_inicial'];
                    }
                    $totalReceitaTotal += $v['FinMovimentacao']['valor'];
                } else {
                    if ($v['FinMovimentacao']['data_confirmacao'] != '') {
                        $totalDespesaRealizado += $v['FinMovimentacao']['valor_final'];
                    } else {
                        $totalDespesaPrevisto += $v['FinMovimentacao']['valor_inicial'];
                    }
                    $totalDespesaTotal += $v['FinMovimentacao']['valor'];
                }

                $totalSaldoPrevisto = $totalReceitaPrevisto - $totalDespesaPrevisto;
                $totalSaldoRealizado = $totalReceitaRealizado - $totalDespesaRealizado;
            }
            
            $totalSaldoTotal = $totalReceitaTotal - $totalDespesaTotal;
        }

        $results = array_merge(
            $results, 
            array('totais' => 
                compact(
                    'totalReceitaPrevisto', 
                    'totalReceitaRealizado', 
                    'totalReceitaTotal', 
                    'totalDespesaPrevisto', 
                    'totalDespesaRealizado', 
                    'totalDespesaTotal', 
                    'totalSaldoPrevisto', 
                    'totalSaldoRealizado', 
                    'totalSaldoTotal' 
                )
            )
        );

        return $results;
    }

    public function getFinMovimentacaoId($id){
        $sql = "SELECT fin_movimentacao_id 
                FROM fin_movimentacoes FinMovimentacao 
                WHERE id = $id";
        $dados = $this->query($sql);
        $dados = $dados[0]['FinMovimentacao']['fin_movimentacao_id'];

        return $dados;
    }

    public function getProximoIdSequencia($id){
        // PEGA OS DADOS DA SEQUÊNCIA
        $fin_movimentacao_id = $this->getFinMovimentacaoId($id);
        $ids = ($fin_movimentacao_id != null) ? implode(',', array($id, $fin_movimentacao_id)) : $id;

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $sql = "SELECT id
                FROM fin_movimentacoes FinMovimentacao 
                WHERE fin_movimentacao_id in ($ids) 
                AND id > $id 
                LIMIT 1";
        $dados = $this->query($sql);
        $dados = (isset($dados[0])) ? $dados[0]['FinMovimentacao']['id'] : null;

        return $dados;
    }

    public function getSaldoAnterior($data, $options = array()){
        // CONVERTE DATA SE NECESSÁRIO
        $data = (strpos($data, '/') !== false) ? convertDate($data) : $data;

        // REMOVE ORDENAÇÃO
        $this->order = '';

        // INICIALIZA VARIÁVEIS
        $filtro = array();
        $campo = '';
        $group = '';

        // FILTA POR CONTA
        if (isset($options['conditions']['FinMovimentacao.fin_conta_id'])){
            $filtro['FinMovimentacao.fin_conta_id'] = $options['conditions']['FinMovimentacao.fin_conta_id'];
        }

        // DETALHA SALDO POR TIPO DE MOVIMENTAÇÃO
        if (isset($options['detalhar']) && $options['detalhar'] == 1){
            $campo = array("SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END END) as receita",
                           "SUM(CASE WHEN FinMovimentacao.tipo = 'D' THEN CASE WHEN valor_final > 0 THEN valor_final*-1 ELSE valor_inicial*-1 END END) as despesa",
                           "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END ELSE CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END*-1 END) as saldo");
        } else {
            $campo = array("SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END ELSE CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END*-1 END) as saldo");
        }

        // FILTA POR STATUS
        if (isset($options['conditions']['FinMovimentacao.status'])){
            $filtro['FinMovimentacao.status'] = $options['conditions']['FinMovimentacao.status'];
        }

        // CONDITIONS
        $conditions = array_merge($filtro, array(
            "CASE 
                WHEN data_confirmacao IS NOT NULL THEN data_confirmacao
                ELSE data_vencimento 
             END < '$data'",
             'FinConta.compoe_saldo'=>1
        ));

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $dados = $this->find(
            'all', array(
                'fields'=> $campo,
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'fin_contas',
                        'alias' => 'FinConta',
                        'type' => 'INNER',
                        'conditions' => array(
                            'FinConta.id = FinMovimentacao.fin_conta_id'
                        )
                    )
                )
            )
        );
        
        if (isset($options['detalhar']) && $options['detalhar'] == 1){
            $saldo = (!empty($dados[0][0]['saldo'])) ? $dados[0][0] : array('receita'=>0,'despesa'=>0,'saldo'=>0);
        } else {
            $saldo = (!empty($dados[0][0]['saldo'])) ? $dados[0][0]['saldo'] : 0;
        }

        return $saldo;
    }

    public function getSaldoConta($data, $options){
        // CONVERTE DATA SE NECESSÁRIO
        $data = (strpos($data, '/') !== false) ? convertDate($data) : $data;

        // REMOVE RELACIONAMENTO
        $this->recursive = -1;

        // REMOVE VIRTUAL FIELDS
        $this->virtualFields = '';

        // REMOVE ORDENAÇÃO
        $this->order = '';

        // FILTA PADRÃO DE STATUS
        $filtro['FinMovimentacao.status'] = array('PG','CO');

        // FILTA POR CONTA
        /*if (isset($options['conditions']['FinMovimentacao.fin_conta_id'])){
            $filtro['FinMovimentacao.fin_conta_id'] = $options['conditions']['FinMovimentacao.fin_conta_id'];
        }*/

        // MONTA CONDITIONS
        $conditions = array_merge($filtro, array(
            "CASE 
                WHEN data_confirmacao IS NOT NULL THEN data_confirmacao
                ELSE data_vencimento 
             END < '$data'",
             'FinConta.compoe_saldo'=>1
        ));

        // DETALHA SALDO POR TIPO DE MOVIMENTAÇÃO
        $campo = array(
            'FinBanco.nome',
            'FinConta.nome',
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END ELSE CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END*-1 END) as saldo"
        );

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $dados = $this->find(
            'all', array(
                'fields'=> $campo,
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'fin_contas',
                        'alias' => 'FinConta',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'FinConta.id = FinMovimentacao.fin_conta_id'
                        )
                    ),
                    array(
                        'table' => 'fin_bancos',
                        'alias' => 'FinBanco',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'FinBanco.id = FinConta.fin_banco_id'
                        )
                    )
                ),
                'group'=>array('FinConta.nome','FinBanco.nome')
            )
        );
        
        $saldo = array();
        unset($dados['totais']);
        foreach ($dados as $k => $v) {
            $saldo[$k]['banco'] = $v['FinBanco']['nome'];
            $saldo[$k]['conta'] = $v['FinConta']['nome'];
            $saldo[$k]['saldo'] = $v[0]['saldo'];
        }

        return $saldo;
    }

    public function getMovimentacoesTotais($data, $options){
        // CONVERTE DATA SE NECESSÁRIO
        $data = (strpos($data, '/') !== false) ? convertDate($data) : $data;

        // REMOVE RELACIONAMENTO
        $this->recursive = -1;

        // REMOVE VIRTUAL FIELDS
        $this->virtualFields = '';

        // REMOVE ORDENAÇÃO
        $this->order = '';

        // FILTA PADRÃO DE STATUS
        $filtro['FinMovimentacao.status'] = array('AG','CO','PG','PE');

        // FILTA POR CONTA
        if (isset($options['conditions']['FinMovimentacao.fin_conta_id'])){
            $filtro['FinMovimentacao.fin_conta_id'] = $options['conditions']['FinMovimentacao.fin_conta_id'];
        }

        // MONTA CONDITIONS
        $conditions = array_merge($filtro, array(
            "CONCAT(year(data_vencimento), month(data_vencimento)) = ".getMesAnoData($data),
            'FinConta.compoe_saldo'=>1
        ));

        // DETALHA SALDO POR TIPO DE MOVIMENTAÇÃO
        $campo = array(
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN valor_inicial ELSE 0 END) as receita",
            "SUM(CASE WHEN FinMovimentacao.tipo = 'D' THEN valor_inicial*-1 ELSE 0 END) as despesa",
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN valor_inicial ELSE valor_inicial*-1 END) as saldo"
        );

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $dados = $this->find(
            'all', array(
                'fields'=> $campo,
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'fin_contas',
                        'alias' => 'FinConta',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'FinConta.id = FinMovimentacao.fin_conta_id'
                        )
                    ),
                ),
            )
        );
        
        $saldo = array();
        unset($dados['totais']);
        foreach ($dados as $k => $v) {
            $saldo = $v[0];
        }

        return $saldo;
    }

    public function getMovimentacoesPrevistasMes($data, $options){
        // CONVERTE DATA SE NECESSÁRIO
        $data = (strpos($data, '/') !== false) ? convertDate($data) : $data;

        // REMOVE RELACIONAMENTO
        $this->recursive = -1;

        // REMOVE VIRTUAL FIELDS
        $this->virtualFields = '';

        // REMOVE ORDENAÇÃO
        $this->order = '';

        // FILTA PADRÃO DE STATUS
        $filtro['FinMovimentacao.status'] = array('AG');

        // FILTA POR CONTA
        if (isset($options['conditions']['FinMovimentacao.fin_conta_id'])){
            $filtro['FinMovimentacao.fin_conta_id'] = $options['conditions']['FinMovimentacao.fin_conta_id'];
        }

        // MONTA CONDITIONS
        $conditions = array_merge($filtro, array(
            "data_vencimento >= '$data'",
            "CONCAT(year(data_vencimento), month(data_vencimento)) = ".date('Yn'),
            'FinConta.compoe_saldo'=>1
        ));

        // DETALHA SALDO POR TIPO DE MOVIMENTAÇÃO
        $campo = array(
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN valor_inicial ELSE 0 END) as receita",
            "SUM(CASE WHEN FinMovimentacao.tipo = 'D' THEN valor_inicial*-1 ELSE 0 END) as despesa",
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN valor_inicial ELSE valor_inicial*-1 END) as saldo"
        );

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $dados = $this->find(
            'all', array(
                'fields'=> $campo,
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'fin_contas',
                        'alias' => 'FinConta',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'FinConta.id = FinMovimentacao.fin_conta_id'
                        )
                    ),
                ),
            )
        );
        
        $saldo = array();
        unset($dados['totais']);
        foreach ($dados as $k => $v) {
            $saldo = $v[0];
        }

        return $saldo;
    }

    public function getMovimentacoesAtrasadas($data, $options){
        // CONVERTE DATA SE NECESSÁRIO
        $data = (strpos($data, '/') !== false) ? convertDate($data) : $data;

        // REMOVE RELACIONAMENTO
        $this->recursive = -1;

        // REMOVE VIRTUAL FIELDS
        $this->virtualFields = '';

        // REMOVE ORDENAÇÃO
        $this->order = '';

        // FILTA PADRÃO DE STATUS
        $filtro['FinMovimentacao.status'] = array('AG', 'PE');

        // FILTA POR CONTA
        if (isset($options['conditions']['FinMovimentacao.fin_conta_id'])){
            $filtro['FinMovimentacao.fin_conta_id'] = $options['conditions']['FinMovimentacao.fin_conta_id'];
        }

        // MONTA CONDITIONS
        $conditions = array_merge($filtro, array(
            "data_vencimento < '$data'",
            'FinConta.compoe_saldo'=>1
        ));

        // DETALHA SALDO POR TIPO DE MOVIMENTAÇÃO
        $campo = array(
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN valor_inicial ELSE 0 END) as receita",
            "SUM(CASE WHEN FinMovimentacao.tipo = 'D' THEN valor_inicial*-1 ELSE 0 END) as despesa",
            "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN valor_inicial ELSE valor_inicial*-1 END) as saldo"
        );

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $dados = $this->find(
            'all', array(
                'fields'=> $campo,
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'fin_contas',
                        'alias' => 'FinConta',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'FinConta.id = FinMovimentacao.fin_conta_id'
                        )
                    ),
                ),
            )
        );
        
        $saldo = array();
        unset($dados['totais']);
        foreach ($dados as $k => $v) {
            $saldo = $v[0];
        }

        return $saldo;
    }

    public function getReceitas($options = array()){
        // INICIALIZA VARIÁVEIS
        $inicio = (!isset($options['inicio'])) ? date('Y-m').'-01 00:00:00' : $options['inicio'];
        $termino = (!isset($options['termino'])) ? date('Y-m-d H:i:s') : $options['termino'];
        $tipo_receita = (!isset($options['tipo_receita'])) ? '' : $options['tipo_receita'];
        $totaliza_vendas = (!isset($options['totaliza_vendas'])) ? 0 : $options['totaliza_vendas'];

        // SETA FILTRO POR EMPRESA
        $gel_empresa_id = CakeSession::read('Auth.Company.id');

        // SETA FILTRO POR PERÍODO
        $filtro_data  = "";
        $filtro_data .= "AND CASE 
                            WHEN FinMovimentacao.data_confirmacao IS NOT NULL THEN FinMovimentacao.data_confirmacao
                            ELSE FinMovimentacao.data_vencimento 
                        END >= '$inicio'";
        $filtro_data .= "AND CASE 
                            WHEN FinMovimentacao.data_confirmacao IS NOT NULL THEN FinMovimentacao.data_confirmacao
                            ELSE FinMovimentacao.data_vencimento 
                        END <= '$termino'";

        // SETA FILTRO POR TIPO DE RECEITA
        $filtro_tipo = "";
        switch ($tipo_receita) {
            case 'OR':
                $filtro_tipo .= "AND FinCategoriaPai.controle_sistema = 'OR'";
            break;
            case 'VE':
                $filtro_tipo .= "AND FinCategoriaPai.controle_sistema != 'OR'";
            break;
        }

        // PEGA RECEITAS
        $sql = "SELECT * FROM (
                SELECT 
                  FinCategoriaPai.nome as 'nome', 
                  FinCategoriaPai.controle_sistema as 'controle_sistema',
                  SUM(CASE WHEN FinMovimentacao.valor_final > 0 THEN FinMovimentacao.valor_final ELSE FinMovimentacao.valor_inicial END) as 'valor'
                FROM fin_movimentacoes FinMovimentacao
                INNER JOIN fin_categorias FinCategoria ON FinCategoria.id = FinMovimentacao.fin_categoria_id
                LEFT JOIN fin_categorias FinCategoriaPai ON FinCategoriaPai.id = FinCategoria.fin_categoria_id
                WHERE FinMovimentacao.gel_empresa_id = $gel_empresa_id 
                AND FinMovimentacao.tipo = 'R'
                AND FinMovimentacao.status in ('PG','CO')
                $filtro_data
                $filtro_tipo
                GROUP BY FinCategoriaPai.nome ) as receitas";
        $receitas = $this->query($sql);

        // TOTALIZA RECEITAS POR VENDAS E OUTRAS RECEITAS
        if ($totaliza_vendas == 1) {
            // INICIALIZA VARIÁVEIS
            $valor_total_vendas = 0;
            $valor_total_outras_receitas = 0;
            $valor_total_receitas = 0;

            // TOTALIZA VALORES
            foreach($receitas as $r){
                if ($r['receitas']['controle_sistema'] == 'OR'){
                    $valor_total_outras_receitas += $r['receitas']['valor'];
                } else {
                    $valor_total_vendas += $r['receitas']['valor'];
                }

                $valor_total_receitas += $r['receitas']['valor'];
            }

            // PREPARA DADOS 
            $dados[0]['receitas']['nome'] = 'Vendas';
            $dados[0]['receitas']['valor'] = $valor_total_vendas;

            $dados[1]['receitas']['nome'] = 'Outras Receitas';
            $dados[1]['receitas']['valor'] = $valor_total_outras_receitas;

            $receitas = $dados;
        }

        return $receitas;
    }

    public function getDespesas($options = array()){
        // INICIALIZA VARIÁVEIS
        $inicio = (!isset($options['inicio'])) ? date('Y-m').'-01 00:00:00' : $options['inicio'];
        $termino = (!isset($options['termino'])) ? date('Y-m-d H:i:s') : $options['termino'];

        // SETA FILTRO POR EMPRESA
        $gel_empresa_id = CakeSession::read('Auth.Company.id');

        // SETA FILTRO POR PERÍODO
        $filtro_data  = "";
        $filtro_data .= "AND CASE 
                            WHEN FinMovimentacao.data_confirmacao IS NOT NULL THEN FinMovimentacao.data_confirmacao
                            ELSE FinMovimentacao.data_vencimento 
                        END >= '$inicio'";
        $filtro_data .= "AND CASE 
                            WHEN FinMovimentacao.data_confirmacao IS NOT NULL THEN FinMovimentacao.data_confirmacao
                            ELSE FinMovimentacao.data_vencimento 
                        END <= '$termino'";

        // SETA FILTRO POR TIPO DE DESPESA
        $filtro_tipo_despesa = "";
        if (isset($options['controle_sistema'])){
            $filtro_tipo_despesa .= "AND FinCategoriaPai.controle_sistema IN ('".implode("','", $options['controle_sistema'])."')";
        }

        // PEGA RECEITAS
        $sql = "SELECT * FROM (
                SELECT 
                  FinCategoriaPai.nome as 'nome', 
                  FinCategoriaPai.controle_sistema as 'controle_sistema',
                  SUM(CASE WHEN FinMovimentacao.valor_final > 0 THEN FinMovimentacao.valor_final ELSE FinMovimentacao.valor_inicial END)*-1 as 'valor'
                FROM fin_movimentacoes FinMovimentacao
                INNER JOIN fin_categorias FinCategoria ON FinCategoria.id = FinMovimentacao.fin_categoria_id
                LEFT JOIN fin_categorias FinCategoriaPai ON FinCategoriaPai.id = FinCategoria.fin_categoria_id
                WHERE FinMovimentacao.gel_empresa_id = $gel_empresa_id 
                AND FinMovimentacao.tipo = 'D'
                AND FinMovimentacao.status in ('PG','CO')
                $filtro_data
                $filtro_tipo_despesa
                GROUP BY FinCategoriaPai.nome ) as despesas";
        $despesas = $this->query($sql);
        
        return $despesas;
    }

    public function getSaldoAtual($data, $options = array()){
        // CONVERTE DATA SE NECESSÁRIO
        $data = (strpos($data, '/') !== false) ? convertDate($data) : $data;

        // REMOVE ORDENAÇÃO
        $this->order = '';

        // INICIALIZA VARIÁVEIS
        $filtro = array();
        $campo = '';
        $group = '';

        // FILTA POR CONTA
        if (isset($options['conditions']['FinMovimentacao.fin_conta_id'])){
            $filtro['FinMovimentacao.fin_conta_id'] = $options['conditions']['FinMovimentacao.fin_conta_id'];
        }

        // DETALHA SALDO POR TIPO DE MOVIMENTAÇÃO
        if (isset($options['detalhar']) && $options['detalhar'] == 1){
            $campo = array("SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END END) as receita",
                           "SUM(CASE WHEN FinMovimentacao.tipo = 'D' THEN CASE WHEN valor_final > 0 THEN valor_final*-1 ELSE valor_inicial*-1 END END) as despesa",
                           "SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END ELSE CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END*-1 END) as saldo");
        } else {
            $campo = array("SUM(CASE WHEN FinMovimentacao.tipo = 'R' THEN CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END ELSE CASE WHEN valor_final > 0 THEN valor_final ELSE valor_inicial END*-1 END) as saldo");
        }

        // FILTA POR STATUS
        if (isset($options['conditions']['FinMovimentacao.status'])){
            $filtro['FinMovimentacao.status'] = $options['conditions']['FinMovimentacao.status'];
        }

        // CONDITIONS
        $conditions = array_merge($filtro, array(
            "CASE 
                WHEN data_confirmacao IS NOT NULL THEN data_confirmacao
                ELSE data_vencimento 
             END >= '$data'",
             'FinConta.compoe_saldo'=>1
        ));

        // PEGA A PRÓXIMA MOVIMENTAÇÃO
        $dados = $this->find(
            'all', array(
                'fields'=> $campo,
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'fin_contas',
                        'alias' => 'FinConta',
                        'type' => 'INNER',
                        'conditions' => array(
                            'FinConta.id = FinMovimentacao.fin_conta_id'
                        )
                    )
                )
            )
        );
        
        if (isset($options['detalhar']) && $options['detalhar'] == 1){
            $saldo = (!empty($dados[0][0]['saldo'])) ? $dados[0][0] : array('receita'=>0,'despesa'=>0,'saldo'=>0);
        } else {
            $saldo = (!empty($dados[0][0]['saldo'])) ? $dados[0][0]['saldo'] : 0;
        }

        return $saldo;
    }
}